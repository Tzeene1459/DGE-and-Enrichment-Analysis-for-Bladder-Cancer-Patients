"0","#Read in the T-Test results file"
"0",""
"0","ttestResults <- read.csv(file = ""output/Tazeen_Team4_Step1_TTest__Stage2-Invasive_(Comp).vs._Stage1-NonInvasive_(Base).TTest.csv"")"
"0",""
"0","#check to make sure p-value column is imported as numeric "
"0","#sort by p-value (just in case the results are not sorted by p-value)"
"0",""
"0","ttestResultsSorted <- dplyr::arrange(ttestResults, Pvalue)"
"0",""
"0","#find rows with p-value < 0.05"
"0","whichSig <- which(ttestResultsSorted$Pvalue <= 0.05) "
"0",""
"0","#Short list sig results"
"0","ttestResultsSig <- ttestResultsSorted[whichSig, ] #18395 rows "
"0",""
"0","### Export short listed results"
"0","write.table(x = ttestResultsSig, "
"0","            file = ""output/Tazeen_Stage1_Precancerous_Ttest_Shortlisted.csv"", "
"0","            quote = F, sep = "","")"
"0",""
"0","##### First column is a list of features in thsi format : ProbeID|GeneName. "
"0","#### Use string split strsplit() function to extract gene names"
"0","funcSplit <- function(featureX) {"
"0","  f1 <- unlist(strsplit(x = featureX, split = ""|"", fixed = TRUE))"
"0","  f2 <- f1[2]"
"0","  return(f2)"
"0","}"
"0",""
"0","# Use apply() function to run the split on every row, its faster version of a loop"
"0","geneNames1 <- apply(X = as.matrix(ttestResultsSig$Feature), "
"0","                    MARGIN = 1, FUN = funcSplit)"
"0",""
"0","head(geneNames1)"
"1","[1]"
"1"," ""UNC5B""   "
"1"," NA        "
"1"," ""KRTAP5-2"""
"1"," NA        "
"1"," ""CRTAC1""  "
"1"," ""ST3GAL5"" "
"1","
"
"0","#print length of short listed gene names"
"0","length(geneNames1)"
"1","[1]"
"1"," 10893"
"1","
"
"0","### Export list of gene names"
"0","write.table(x = geneNames1, "
"0","            file = ""output/Tazeen_Stage1_Precancerous_SigDiffExpressedGenes.csv"", "
"0","            quote = F, sep = "","")"
