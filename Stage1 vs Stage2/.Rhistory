encounters.provider = providers.id
left join notes on
encounters.patient = notes.patient and encounters.start::date = notes.date
where patients.id = '000b85ff-c01a-62c9-1515-14d3a2369a8a'
AND encounters.id = '23ca2b4b-5c9e-71ff-cf4a-0515bbc9e23b'")
note_text <- encounter_note$note_text[1]
prompt <- glue("Please turn this note into a letter that I can send to my patient. Make sure the tenses are correct and grammar is correct. Make sure it's brief. \n\n {note_text}")
response = invoke_llm(prompt)
cat(response)
prompt <- glue("Please turn this note into a letter that I can send to my patient. Make sure the tenses are correct and grammar is correct. Make sure it's brief. \n\n {note_text}")
response = invoke_llm(prompt)
#cat(response)
note_text
print(note_text)
prompt <- glue("Please turn this note into a letter that I can send to my patient. Make sure the tenses are correct and grammar is correct. Make sure it's brief. If there is no info in the note, give me a null. \n\n {note_text}")
response = invoke_llm(prompt)
#cat(response)
note_text = "DOB: 05/22/1946 (78 yo)
Visit Date: 12/01/2024
CC: Fatigue
HPI:
78 yo M w/ hx of CKD4 c/o fatigue, congestion, ST, and AMS. Pt reports fevers, SOB, and cough. Denies CP or trauma.
PMH:
CKD (progression to Stage 4).
Severe anxiety w/ panic episodes.
Suspected prostate CA (workup pending).
SHx:
Single, NS, heterosexual.
Limited social support; hx of environmental violence.
Allergies: NKDA
Vitals: T 100.8°F | HR 92 | RR 18 | BP 138/84 | SpO₂ 96% RA
PE:
HEENT: +congestion, 2+ tonsillar swelling, erythematous OP, no exudates.
Resp: Mild wheeze, no rales.
CV: RRR, no m/r/g.
Abd: Soft, NT/ND, no HSM.
Neuro: A&O x2, mildly disoriented.
Ext: No edema; +tingling in b/l hands/feet.
*A/P*
URI (viral vs. bacterial):
Rapid strep, throat cx.
Supportive tx: APAP prn fever, PO hydration, rest.
AMS/fatigue, likely 2/2 systemic illness or underlying psych hx:
Monitor sx closely, esp confusion.
Labs: CBC, BMP, UA to eval for infection or metabolic derangement.
CKD4 - med adjustment considerations:
Cont current meds: insulin, tacrolimus, amlodipine, alendronate.
Coordinate nephro f/u for CKD mgmt.
SOB (monitor for worsening):
CXR prn if sx progress.
RTC in 1 wk or sooner if SOB/confusion worsens."
prompt <- glue("Please turn this note into a letter that I can send to my patient. Make sure the tenses are correct and grammar is correct. Make sure it's brief. If there is no info in the note, give me a null. \n\n {note_text}")
response = invoke_llm(prompt)
#cat(response)
# Get the last 5 notes for a specific patient
notes <-
dbGetQuery(con, "
select
patients.race, patients.gender, patients.birthdate,
encounters.patient, encounters.start, encounterclass,
encounters.description encounter_description, note_text
from patients
left join encounters on
patients.id = encounters.patient
left join notes on
encounters.patient = notes.patient and encounters.start::date = notes.date
where patients.id = '000b85ff-c01a-62c9-1515-14d3a2369a8a'
ORDER by encounters.start desc
LIMIT 5
")
# Get the last 5 notes for a specific patient
notes <-
dbGetQuery(con, "
select
patients.race, patients.gender, patients.birthdate,
encounters.patient, encounters.start, encounterclass,
encounters.description encounter_description, note_text
from patients
left join encounters on
patients.id = encounters.patient
left join notes on
encounters.patient = notes.patient and encounters.start::date = notes.date
where patients.id = '000b85ff-c01a-62c9-1515-14d3a2369a8a'
ORDER by encounters.start desc
LIMIT 5
")
# Get the last 5 notes for a specific patient
notes <-
dbGetQuery(con, "
select
patients.race, patients.gender, patients.birthdate,
encounters.patient, encounters.start, encounterclass,
encounters.description encounter_description, note_text
from patients
left join encounters on
patients.id = encounters.patient
left join notes on
encounters.patient = notes.patient and encounters.start::date = notes.date
where patients.id = '000b85ff-c01a-62c9-1515-14d3a2369a8a'
ORDER by encounters.start desc
LIMIT 5
")
print(notes)
prompt <- glue("Please summarize these 5 notes for a patient into a single paragraph for the provider to see. Make sure it's brief. If there is no info in the note, don't try to come up with stuff. \n\n {notes}")
response = invoke_llm(prompt)
#cat(response)
encounter_note <-
dbGetQuery(con, "
select
providers.name provider_full_name, providers.organization provider_organization,
first, last, patients.address, patients.city, patients.state, patients.zip,
race, patients.gender, birthdate,
encounters.patient, encounters.start, encounterclass,
encounters.description encounter_description, note_text
from patients
left join encounters on
patients.id = encounters.patient
left join providers on
encounters.provider = providers.id
left join notes on
encounters.patient = notes.patient and encounters.start::date = notes.date
where patients.id = '000b85ff-c01a-62c9-1515-14d3a2369a8a'
AND encounters.id = '23ca2b4b-5c9e-71ff-cf4a-0515bbc9e23b'")
print(encounter_note)
prompt <- glue("Note that for this patient we don't have a note in the note_text section. Please take the rest of the information in this dataframe and turn it into a note that i can put in the note_text column. Make sure to make it make sense, and keep it simple, brief and do not make stuff up if you see information missing. \n\n {encounter_note}")
response = invoke_llm(prompt)
#cat(response)
prompt <- glue("Note that for this patient we don't have a note in the note_text section. Please take the rest of the information in this dataframe and turn it into a paragraph type summarized note that i can put in the note_text column. Make sure to make it make sense, and keep it simple, brief and do not make stuff up if you see information missing. \n\n {encounter_note}")
response = invoke_llm(prompt)
#cat(response)
imaging_study <-
dbGetQuery(con, "select patients.first, patients.last,
imaging_studies.patient,
bodysite_description, modality_description,
imaging_studies.date as image_date,
note_text
from imaging_studies
left join notes on
imaging_studies.patient = notes.patient
and imaging_studies.date::date = notes.date::date
join patients on
imaging_studies.patient = patients.id
where imaging_studies.id = 'd433f5a4-78ed-8329-50ab-0deea72b9976'")
print(imaging_study)
prompt <- glue("Please summarize this information for a patient's radiology encounter into a single report for the provider to see. Make sure it's brief. If there is no info in the note, don't try to come up with stuff. Make sure you include everything in the dataframe in a coherent manner \n\n {notes}")
response = invoke_llm(prompt)
#cat(response)
prompt <- glue("Please summarize this information for a patient's radiology encounter into a single report with bullet points and sections, for the provider to see. Make sure it's brief. If there is no info in the note, don't try to come up with stuff. Make sure you include everything in the dataframe in a coherent manner \n\n {notes}")
response = invoke_llm(prompt)
#cat(response)
imaging_study <-
dbGetQuery(con, "select patients.first, patients.last,
imaging_studies.patient,
bodysite_description, modality_description,
imaging_studies.date as image_date,
note_text
from imaging_studies
left join notes on
imaging_studies.patient = notes.patient
and imaging_studies.date::date = notes.date::date
join patients on
imaging_studies.patient = patients.id
where imaging_studies.id = 'd433f5a4-78ed-8329-50ab-0deea72b9976'")
print(imaging_study[note_text])
imaging_study <-
dbGetQuery(con, "select patients.first, patients.last,
imaging_studies.patient,
bodysite_description, modality_description,
imaging_studies.date as image_date,
note_text
from imaging_studies
left join notes on
imaging_studies.patient = notes.patient
and imaging_studies.date::date = notes.date::date
join patients on
imaging_studies.patient = patients.id
where imaging_studies.id = 'd433f5a4-78ed-8329-50ab-0deea72b9976'")
print(imaging_study$note_text)
prompt <- glue("Please summarize this information for a patient's radiology encounter into a single report with bullet points and sections, for the provider to see. Make sure it's brief. If there is no info in the note, don't try to come up with stuff. Make sure you include everything in the dataframe in a coherent manner \n\n {imaging_study}")
response = invoke_llm(prompt)
#cat(response)
extractor_llm <- chat_azure(
deployment_id = "gpt-4o",
api_version = API_VERSION,
system_prompt = "You are an expert at extracting data from text. Given a set of instructions return the request data as JSON.",
# Don't stream the response back
echo = "none"
)
# Here we do this without using OpenAI's support for data extraction
example_text = "My name is Susan and I'm 13 years old"
prompt = glue("Extract the name and age from the following text: \n\n {example_text}")
response = invoke_llm(prompt, extractor_llm)
cat(response)
# OpenAI always returns the JSON surrounded by the ```json ..... ``` tags. We need to strip them.
response = str_replace_all(response, "^```json|```$", "")
as.data.frame(fromJSON(response))
# OpenAI always returns the JSON surrounded by the ```json ..... ``` tags. We need to strip them.
library(fromJSON)
renv::install("fromJSON")
# OpenAI always returns the JSON surrounded by the ```json ..... ``` tags. We need to strip them.
library(rjson)
response = str_replace_all(response, "^```json|```$", "")
as.data.frame(fromJSON(response))
# However we can also pass our expected data structure. In the background this the "type_object" result is converted to a "JSON schema" and sent to the LLM. This guarantees that you get back a valid data format.
# In this case, it also gets parsed from JSON into a data structured automatically. Note that our instructions are now embedded in the data structure as well.
# You can put additional instructions in the model system prompt, or pre-pend them the the text. Generally I use the system prompt.
extractor_llm$extract_data(
example_text,
type = type_object(
age = type_number("The age of the patient"),
name = type_string("The name of the patient")
)
)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("enrichR")
#install.packages("openxlsx")# independant of java
#install.packages("devtools")
#devtools::install_github("wjawaid/enrichR")
library(enrichR)
library(openxlsx)
# NOTE - if you have an error "EnrichR website not responding"  and unable to connect to EnrichR database online, try this
# OPTION 1
#devtools::install_github("wjawaid/enrichR")
#library(enrichR)
# OPTION 2 - update curl and wget
# (Step a) Open the "terminal" application for these commands. Follow instructions for mac
# https://help.ubidots.com/en/articles/2165289-learn-how-to-install-run-curl-on-windows-macosx-linux
#
# (Step b) Install/update wget to the latest version
# Use the same "terminal" application. Enter
# brew install wget
#
# (step C) Restart your computer.
# Try out these EnrichR commands to see if you are able to access the enrichR databases online without error message
# install.packages("enrichR")
# library(enrichR)
# enrichR::listEnrichrDbs()
knitr::opts_chunk$set(echo = TRUE)
#install.packages("enrichR")
#install.packages("openxlsx")# independant of java
#install.packages("devtools")
#devtools::install_github("wjawaid/enrichR")
library(enrichR)
library(openxlsx)
# NOTE - if you have an error "EnrichR website not responding"  and unable to connect to EnrichR database online, try this
# OPTION 1
#devtools::install_github("wjawaid/enrichR")
#library(enrichR)
# OPTION 2 - update curl and wget
# (Step a) Open the "terminal" application for these commands. Follow instructions for mac
# https://help.ubidots.com/en/articles/2165289-learn-how-to-install-run-curl-on-windows-macosx-linux
#
# (Step b) Install/update wget to the latest version
# Use the same "terminal" application. Enter
# brew install wget
#
# (step C) Restart your computer.
# Try out these EnrichR commands to see if you are able to access the enrichR databases online without error message
# install.packages("enrichR")
# library(enrichR)
# enrichR::listEnrichrDbs()
#folder that contains group comparison results
fileName <- "input/Tazeen_Stage2_Stage1_Ttest_Shortlisted.csv"
# read in group comparison results
result1 <- read.csv(file = fileName,
header = T, stringsAsFactors = F, row.names = 1)
pValueCutOff <- 0.05
fdrCutOff <- 0.01
which1 <- (as.numeric(result1$Pvalue) <= pValueCutOff) & (as.numeric(result1$FDR) <= fdrCutOff)
table(which1) #10893 genes with p <= 0.05 and fdr <= 0.01
resultShort <- result1[which1, ] #short listed genes
resultShort <- head(resultShort[order(as.numeric(resultShort$FDR)), ], 1000) #keeping only the top 1000 based on fdr
funcSplit <- function(rep_gene) {
rep_gene_split <- unlist(strsplit(x = rep_gene,
split = "|",
fixed = TRUE))
gene <- rep_gene_split[2]
return(gene)
}
geneListSplit <- apply(X = as.matrix((resultShort$Feature)),
MARGIN = 1, FUN = funcSplit )
head(geneListSplit) #cleaned gene names
#remove duplicates
geneListSplit1 <- unique(geneListSplit)
# remove NA value
geneListFinal <- na.omit(geneListSplit1)
head(geneListFinal)
#print number of unique genes
# left with 950 after cleanup
length(geneListFinal)
#checking if EnrichR website and packing are working
#dbs <- enrichR::listEnrichrDbs()  #total number of databases available = 200+
#testing if EnrichR package is working
testOutput <- enrichR::enrichr(genes = c("Runx1", "Gfi1", "Gfi1b", "Spi1", "Gata1", "Kdr"), databases = "KEGG_2021_Human")
head(testOutput[[1]])
#List of databases for which enrichment analysis will be run
dblist1 <- read.csv(file = "input/2023-EnrichR-Databases.txt",
header = F, stringsAsFactors = F)
head(dblist1)
# set output file name
outputFileName1 <- paste("output/Tazeen-Team4-Step2-Stage2_Stage1.", "_EnrichR.xlsx", sep="")
#Load R script into the environment
source(file = "functionEnrichment.R")
#call function to run Enrichment
functionEnrichment(dblist1, geneListFinal, outputFileName1)
#NEED INTERNET CONNECTION
#folder that contains group comparison results
fileName <- "input/Tazeen_Stage2_Stage1_Ttest_Shortlisted.csv"
# read in group comparison results
results <- read.csv(file = fileName,
header = T, stringsAsFactors = F, row.names = 1)
#folder that contains group comparison results
fileName <- "input/Tazeen_Stage2_Stage1_Ttest_Shortlisted.csv"
# read in group comparison results
results <- read.csv(file = fileName,
header = T, stringsAsFactors = F, row.names = 1)
pValueCutOff <- 0.05
fdrCutOff <- 0.01
which <- (as.numeric(result1$Pvalue) <= pValueCutOff) & (as.numeric(results$FDR) <= fdrCutOff)
pValueCutOff <- 0.05
fdrCutOff <- 0.01
which <- (as.numeric(results$Pvalue) <= pValueCutOff) & (as.numeric(results$FDR) <= fdrCutOff)
table(which) #10893 genes with p <= 0.05 and fdr <= 0.01
resultShort <- results[which, ] #short listed genes
resultShort <- head(resultShort[order(as.numeric(resultShort$FDR)), ], 1000) #keeping only the top 1000 based on fdr
funcSplit <- function(rep_gene) {
rep_gene_split <- unlist(strsplit(x = rep_gene,
split = "|",
fixed = TRUE))
gene <- rep_gene_split[2]
return(gene)
}
geneListSplit <- apply(X = as.matrix((resultShort$Feature)),
MARGIN = 1, FUN = funcSplit )
head(geneListSplit) #cleaned gene names
#remove duplicates
geneListSplit_unique <- unique(geneListSplit)
# remove NA value
geneList_final <- na.omit(geneListSplit_unique)
head(geneListFinal)
funcSplit <- function(rep_gene) {
rep_gene_split <- unlist(strsplit(x = rep_gene,
split = "|",
fixed = TRUE))
gene <- rep_gene_split[2]
return(gene)
}
geneListSplit <- apply(X = as.matrix((resultShort$Feature)),
MARGIN = 1, FUN = funcSplit )
head(geneListSplit) #cleaned gene names
#remove duplicates
geneListSplit_unique <- unique(geneListSplit)
# remove NA value
geneList_final <- na.omit(geneListSplit_unique)
head(geneList_final)
#print number of unique genes
# left with 950 after cleanup
length(geneList_final)
#checking if EnrichR website and packing are working
#dbs <- enrichR::listEnrichrDbs()  #total number of databases available = 200+
#testing if EnrichR package is working
testOutput <- enrichR::enrichr(genes = c("Runx1", "Gfi1", "Gfi1b", "Spi1", "Gata1", "Kdr"), databases = "KEGG_2021_Human")
head(testOutput[[1]])
#List of databases for which enrichment analysis will be run
dblist1 <- read.csv(file = "input/2023-EnrichR-Databases.txt",
header = F, stringsAsFactors = F)
head(dblist1)
# set output file name
outputFileName <- paste("output/Tazeen-Team4-Step2-Stage2_Stage1.", "_EnrichR.xlsx", sep="")
#Load R script into the environment
source(file = "functionEnrichment.R")
#call function to run Enrichment
functionEnrichment(dblist1, geneList_final, outputFileName)
#NEED INTERNET CONNECTION
# set output file name
outputFileName <- paste("output/Stage2vsStage1.", "_EnrichR.xlsx", sep="")
#Load R script into the environment
source(file = "functionEnrichment.R")
#call function to run Enrichment
functionEnrichment(dblist1, geneList_final, outputFileName)
#NEED INTERNET CONNECTION
setwd("~/Documents/Georgetown/HIDS_7003 Precision Health/Final - Bladder Cancer/Stage1 vs Stage2")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("enrichR")
#install.packages("openxlsx")# independant of java
#install.packages("devtools")
#devtools::install_github("wjawaid/enrichR")
library(enrichR)
library(openxlsx)
# NOTE - if you have an error "EnrichR website not responding"  and unable to connect to EnrichR database online, try this
# OPTION 1
#devtools::install_github("wjawaid/enrichR")
#library(enrichR)
# OPTION 2 - update curl and wget
# (Step a) Open the "terminal" application for these commands. Follow instructions for mac
# https://help.ubidots.com/en/articles/2165289-learn-how-to-install-run-curl-on-windows-macosx-linux
#
# (Step b) Install/update wget to the latest version
# Use the same "terminal" application. Enter
# brew install wget
#
# (step C) Restart your computer.
# Try out these EnrichR commands to see if you are able to access the enrichR databases online without error message
# install.packages("enrichR")
# library(enrichR)
# enrichR::listEnrichrDbs()
#folder that contains group comparison results
fileName <- "input/Tazeen_Stage2_Stage1_Ttest_Shortlisted.csv"
# read in group comparison results
results <- read.csv(file = fileName,
header = T, stringsAsFactors = F, row.names = 1)
pValueCutOff <- 0.05
fdrCutOff <- 0.01
which <- (as.numeric(results$Pvalue) <= pValueCutOff) & (as.numeric(results$FDR) <= fdrCutOff)
table(which) #10893 genes with p <= 0.05 and fdr <= 0.01
resultShort <- results[which, ] #short listed genes
resultShort <- head(resultShort[order(as.numeric(resultShort$FDR)), ], 1000) #keeping only the top 1000 based on fdr
funcSplit <- function(rep_gene) {
rep_gene_split <- unlist(strsplit(x = rep_gene,
split = "|",
fixed = TRUE))
gene <- rep_gene_split[2]
return(gene)
}
geneListSplit <- apply(X = as.matrix((resultShort$Feature)),
MARGIN = 1, FUN = funcSplit )
head(geneListSplit) #cleaned gene names
#remove duplicates
geneListSplit_unique <- unique(geneListSplit)
# remove NA value
geneList_final <- na.omit(geneListSplit_unique)
head(geneList_final)
#print number of unique genes
# left with 950 after cleanup
length(geneList_final)
#checking if EnrichR website and packing are working
#dbs <- enrichR::listEnrichrDbs()  #total number of databases available = 200+
#testing if EnrichR package is working
testOutput <- enrichR::enrichr(genes = c("Runx1", "Gfi1", "Gfi1b", "Spi1", "Gata1", "Kdr"), databases = "KEGG_2021_Human")
head(testOutput[[1]])
#List of databases for which enrichment analysis will be run
dblist1 <- read.csv(file = "input/2023-EnrichR-Databases.txt",
header = F, stringsAsFactors = F)
head(dblist1)
# set output file name
outputFileName <- paste("output/Stage2vsStage1.", "_EnrichR.xlsx", sep="")
#Load R script into the environment
source(file = "functionEnrichment.R")
#call function to run Enrichment
functionEnrichment(dblist1, geneList_final, outputFileName)
#NEED INTERNET CONNECTION
setwd("~/Documents/Georgetown/HIDS_7003 Precision Health/Final - Bladder Cancer/Stage1 vs Stage2/output")
setwd("~/Documents/Georgetown/HIDS_7003 Precision Health/Final - Bladder Cancer/Stage1 vs Stage2")
clinData <- read.csv(file = "input/BC_ClinData_233rows.csv", header = T, stringsAsFactors = F, row.names = 1)
head(clinData)
knitr::kable(head(clinData), caption = "Clinical Data with rows as patients and attributes as columns")
dim(clinData)
# Read in gene expression file - features (rows), 30 patients (columns)
geneExp <- read.csv(file = "input/BC_GeneExpData_withAnno_233.tsv", sep = "\t", header = T, stringsAsFactors = F, row.names = 1)
head(geneExp[1:5, 1:4])
knitr::kable(head(geneExp), caption = "Processed gene expression data in log2 scale with gene annotation")
clinData$GSMid # these are the identifiers in the clinical data
colnames(geneExp) # same identifiers in the gene exp data
matchingSamples = which(colnames(geneExp) %in% (clinData$GSMid))
#matchingSamples Commented to contain the size of the pdf upon knitting
subsetGeneExp <- geneExp[, matchingSamples]
head(subsetGeneExp)
# Labels (row numbers) that can identify the baseline group patients
baselineGrpLabels <-  which(clinData$PrimaryBladderCancerType == "Primary_BC_Superficial") #103 samples
head(baselineGrpLabels)
length(baselineGrpLabels)
# Use the labels (row numbers) to subset baseline patients in clinical data file
clinBase <- clinData[baselineGrpLabels, ]
head(clinBase)
# Labels (row numbers) that can identify the comp group patients
compGrpLabels <- which(clinData$PrimaryBladderCancerType == "Primary_BC_Invasive") #62 samples
head(compGrpLabels)
length(compGrpLabels)
# Use the labels (row numbers) to subset comp patients in clinical data file
clinComp <- clinData[compGrpLabels, ]
head(clinComp)
#### Use the clinBase and clinComp objects to subset gene expression data
geneExpBase <- subsetGeneExp[, clinBase$GSMid] # 43148 feature (rows), 103 samples columns
geneExpComp <- subsetGeneExp[, clinComp$GSMid] # 43148 feature (rows), 62 samples columns
head(geneExpBase)
head(geneExpComp)
#See if sample ids in clinical data match sample ids in gene exp data
clinBase$GSMid == colnames(geneExpBase)
clinComp$GSMid == colnames(geneExpComp)
### Checking if the samples IDs baseline and comp groups are the same ---- can put these in an excel to see if IDs match
write.table(clinBase$GSMid , file = "sanity/Tazeen_ClinBaseIDs.tsv", sep="\t", quote = F  )
write.table(clinComp$GSMid , file = "sanity/Tazeen_ClinCompIDs.tsv", sep="\t", quote = F  )
write.table(colnames(geneExpBase) ,
file = "sanity/Tazeen_GeneExpBaseIDs.tsv",
sep="\t", quote = F  )
write.table(colnames(geneExpComp) ,
file = "sanity/Tazeen_GeneExpCompIDs.tsv",
sep="\t", quote = F  )
#Export the features from gene expression data
#Open this file and check that it contains only probe/gene names and no other garbage
write.table(rownames(geneExp),file = "Tazeen_FeatureIDs.tsv", sep="\t", quote = F  )
### Checking to make sure data is a numeric data frame
knitr::kable(head(geneExpBase[1:5,1:4]))
knitr::kable(head(geneExpComp[1:5,1:4]))
source("fnTTest.R")
#### Call T-test function
results1 = fnTTest(baseGroup = geneExpBase,
compGroup = geneExpComp,
testName = "Tazeen_Team4_Step1_TTest_",
baseGroupName = "Stage1-NonInvasive",
compGroupName =  "Stage2-Invasive",
folderName = "output")
